Название: Library
Цель: Создание веб-приложения которое позволяет управлять книгами с использованием FastAPI.

Задача: Разработать архитектуру
Цель: Составить схему архитектуры


Подзадача: Анализ архитектуры
Архитектура приложения построена на основе FastAPI - фреймворк для создания API на Python. Используется библиотека pydentic.


Подзадача: Сравнение Архитектур
цель: Сравнить с другими архитектурами
Если сравнивать архитектуру с использованием БД, то архитектура которую использовал я подходит для небольших проектов и прототипов, нежели архитектура с использованием базы данных.


Подзадача: Выбор и обоснование выбора
Цель: Сравнить архитектуры
Я выбрал архитектуру FastAPI так как это просто реализовать и выглядит минималистично, а так же позволяет быстро разработать проект.


Подзадача: Бизнес-аналитика
Цель: Узнать какие самые популярные книги (по количеству просмотров или запросов).
можно узнать с помощью Трекинг API: сбор метрик(данных) по запросам (например, с помощью Prometheus или Grafana).


Подзадача: Анализ данных
Цель: Отследить активность пользователей
можно логировать(записывать инфу о каждом запросе(время, метод, статус ответа)) все запросы к API и построить график активности пользователей по часам в день.


Подзадача: Системная Аналитика
Цель: Сделать приложение удобным для дальнейшей разработки и поддержки.
Можно Внедрить логирование и мониторинг (например, с использованием Prometheus и Grafana).



Задача: Определение Сущности.
Цель: Определить сущности.
В моем проекте основными сущностями являются Книга, Автор.

Используется библиотека pydentic, Класс Basemodel.
в классе Book наследуемся от Basemodel.
Определили поля id, title, autor, year.

class Book(BaseModel):
    id: int
    title: str
    autor: str
    year: int


Задача: Определение хранилища
Цель: Определить как я буду хранить данные в своем проекте

Данные в проекте я буду хранить в переменной books которая должна быть списком, содержащим элементы типа Book.
books: list[Book] = []




Задача: Определение интерфейса
Цель: прописать интерфейс
@app.get("/books") - получить список книг.
@app.get("/books/{book_id}") - получить книгу по id.
@app.post("/books") - добавить новую книгу.
@app.put("/books/edit/{book_id}") - обновляем данные о книге.
@app.delete("/book/delete/{book_id}") - удаляем книгу по id.


Задача: Протестировать приложение
Цель: рассказать про методы тестирования

Протестировать приложение можно с помощью SwagerUI или postman.